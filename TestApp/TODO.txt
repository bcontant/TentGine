TODO
====
- Material implementation
  - Diffuse Color
  - Texture
    - Texture hold its sampling state?  Or material?
  - Holds shaders
  - Can have multiple shaders for multiple input data (pos/uv only, pos/uv/normal, etc)

- Shader
  - Responsible for holding and updating their ConstantBuffers
  - Callers will set the CB values

- InputLayout
  - Renderer responsibility to make the active geometry (VB) connect correctly to the desired Material (shaders, textures, etc)

- Rendering Overlord should minimize duplication (SamplerStates, InputLayouts, ConstantBuffers)
  
- Text implementation
  - Right / Left / Center Align (X + Y)
  - Support Gradient
  - Support Drop Shadow
  - Support Outlines
  
  - Try multiple approaches (static not moving / static moving / changing text may yield different results) : 
    * indexed quad + x/y translate per quad
	* simple list of non-indexed
	* DrawInstanced

  - Implement SDF Generation
  - Implement SDF Rendering

- PNG Loader : Support Indexed Color (Type:3) ?
- DDS Loader
- BMP loader / saver?
- GIF?  TIFF?  PBM?

- XML : Support encodings (UTF8 etc)

- Fix annoying line endings shennanigans with MSCV + GitHub

- Reflection : Handle Method overload
- Reflection : Handle Static Members
- Reflection : Make Custom Ctor's better (support passing params to New + Default Arguments, use a list of args instead of shitting function redefinition)
- Relfection : If I'm going to drop params to find the right prototype, should I support adding extra params too (default objects)?
- Reflection : Dynamic array support for serialization (how to treat T*, basically.  Is it one?  two?  a million objects?  Ideas : flags to indicate null termination or size from another property)
- Reflection : Support deserialization
- Reflection : Multiple inheritance?
  
- Profile viewer
  - Make it realtime
  - Bunch of features (grouping blocks, etc)
- Profiler : Consolidate Data after a certain number of frames
- Profiler : Keep data from irregular frames
- Profiler : Make aware of Frame Start and Frame End for better evaluation of irregularities

- Visual Graphical Debug Tool
  - Wireframe / Flat mode
  - Arrows
  - Lines
  - Spheres
  - etc.
    
- GetDeviceList
- GetDeviceCaps

DONE 
====
- Texture should init from a BitmapData (remove simple u8* buffers)
- FontDataFile should use BitmapImage
- FontDataFile should have a std::vector<GlyphInfo> and a std::map<wchar_t, GlyphInfo*>
- Simple Text implementation
- Vertex Buffers implementation
- Static / Dynamic VBs
- Cross Platform Vector + Matrix
- Basic header for uniform type definition (u8, s8, u16, s16, u32, s32, float, double, u64, s64, etc)
- Remove the WIC Stuff
- JPG loader / saver
- Support Regions (Text)
- Support Linebreaks (\n) (Text)
- Support clean line breaking on spaces, if possible (Text)
- Support Color (Text)
- XML Parser
- Reflection : Implement Type Meta Data
- Reflection : Implement Members
- Reflection : Implement Functions (Type-safe, w/ and w/o instances)
- Reflection : Support abstract classes
- Reflection : Support types with no default constructor 
- Reflection : Fix issue with unstripped types (Obj != Obj** != Obj& etc) (Variants)
- Reflection : Variant
- Reflection : Support setting a different default constructor
- Reflection : Support instance-less method calling on classes that don't have a default constructor.
- Reflection : Support adding methods on nonDestructible classes (was an issue because of the instanceless calling code which created an object on the stack which needed a destructor)
- Reflection : Typesafety checks on Variant casting
- Reflection : Casting operator on Variant
- Basic Serialization
- Refac to support serializing object for different types (text, binary, XML, JSON, etc)
- Reflection : Handle Arrays[].  Also supported by serialization through the existing Container interface
- Reflection : Container support for serialization
- Reflection : Add std::string support as a fundamental
- Reflection : Clean up / Organisation
- Reflection : Fix Custom Ctor not getting called properly by InstanceTypeInfo (using default or nullptr instead) (Ex : Variant v = MyType() -> no ctor called within Variant)
- Reflection : Fix Array[] type <T> + CreateDefaultObject
- Reflection : VariantBase + VariantRef
- Reflection : Remove requirement to provide function signature when calling functions
- Reflection : Support dropping params to find the right prototype when calling methods
- Reflection : Remove the std::function stuff, don't like it.  Figure out how to make it work with pointers to member function
- Reflection : Add meta info in TypeFunction (return type, param types, param count)
- Reflection : Add Assignment Copy and Constructor Copy, and use it properly.
- Reflection : Support reference types properly (VariantRef + reference params in reflected functions)
- [REJECTED] Variant : .As() autocasts from pointer to value or from value to pointer???
- Reflection : Support non-copyable classes
- Reflection + Variant : Only allow 'casting' down to void* or a base type?
- Reflection : How are double**, triple*** pointers supposed to work?  They're currently lost in translation
- Reflection : Try to add a int* member to MyType, see what happens. (+Serialize)
- Reflection : Make polymorphism worked when serializing, for example, a std::vector<BaseObject*> (save the actual derived instances)
- Reflection : Handle Static Functions
- Reflection : Merged Type and TypeInfo (finally)
- Reflection : Remove VTable comparison with typeid(*obj) on base object
- Variant : Automatic dynamic casting
- Reflection : Formatting, variable names, private/protected and useful assert / error reporting